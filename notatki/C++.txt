Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-09-09T09:04:49+02:00

====== C++ ======

https://gist.github.com/lo1cgsan

**C++** – wymaga deklaracji typu zmiennej.
**int** – liczby całkowite.
**float** – liczby ułamkowe.
Jak chcemy cos wyswietlic uzywamy **""** - oznacza on ciąg znaków, stała zapisowa. Gdy chcemy dodac kolejny tekst uzywamy <<.
Każda instrukcja kończy się **;**
Do pobierania używa się funkcji **cin >>**. Operator wyprowadzania to **cout <<**.
**Kompilacja** to 1 etap uruchomienia Używamy **F8** lub  **Zbuduj/Compile**.
Podczas Kompilowania tworzony jest plik obiektowy o rozszerzeniu **".o"   **Kod napisany w c++ osobnie kompilujemy w windowsie lub macosie.
**Linkowanie** **F9**, **Zbuduj / Build**, to łączenie kodu z bibliotekami systemowymi i w efekcie powstaje plik wykonywalny (najcześciej z rozszerzeniem **".exe"**).
Uruchomienie F5.
int i; //Deklaracja
int = 0; //Inicjacja
int i = 0; //DEKLARACJA I INICJACJA = definicja
**<< endl;** - drukuje koniec wiersza
**Błędy i ostrzeżenia kompilatora :** 
error : expected initializer... - **nie ma średnika**
warning : unused variable - nieużywana zmienna.
error : expected ';' before 'return'
error : expected '}' at end of input.
error : no match for operator.
error : expected initializer before cout. - nie ma **<<**  przed **cout**.
error: ‘i’ was not declared in this scope – "i" nie jest zdefiniowane. 
**&&** - logiczny operator koniunkcji
**||** - logiczny operator alternatywy.
Funkcje w **c++** są wstanie zwracać tylko pojedyncze wartości,
**!=** - jest różny od
void nazwafunkcji (ew.parametry){
zmienne lokalne
ciało funkcji;
}
**przekazywanie argumentów przez wartość(by value)** - tworzy kopię tego co dostaje dodaje kolejna zmienna lokalna(kopia tego parametru, co przekazujemy)

**przekazywanie argumentów przez referencje** **- & -** przekazyawnie referencji powoduje, że funkcja ma dostęp do innych lokalnych

jeśli w funckji jest zdefiniwane a, jest to zmienna lokalna i w funkcji głownej podsstawianie pod a, nie będzie  miało znaczenia, gdyż jest ona lokalna, ale w innaczej 

jeśli podamy w nawiasie funckji mod(int &z)
		z = 1000
		natomiast w main 
		mod( a)
		powoduje, że funcja nadpisuje w pamięci zmiennych lokalnych zamiast tworzyć nowe (zmienia wartość a, zamiast dodawać kolejną) nie jest to adres, tylko udestępnia ją do odyfikacji


===== Uruchamianie programu : =====
F8, F9, F5
Pary otwarcie-zamknięcie: "", '', (), {}, [].

===== Specyfikacja algorytmu : =====
1) Zadanie
2) dane wejściowe i ich typy
3) Właściwy algorytm: lista kroków.
4) dane wyjściowe i ich typy lub postać
 

===== Pętle =====

==== for ====
Pętla **for** w c++ składa się z 3 części.
1) początkowa wartość zmiennej iteracyjnej int **i=0** lub **i=0**
2)Ile razy pętla ma się wykonać (dopóki) **i < 10**
3) **i++** - inkrementacja zmiennej powiększenie o 1. **i--** – dekrementacja, czyli pomniejszenie zmiennej o 1. **i =+ 2** – inkrementacja o 2
4) Przykład :  for(int i=0;i < 10; i++)
5) Zmienna i jest deklarowana  w pętli for, więc ta zmienna jest ważna tylko w zakresie tej pętli. Zakres pętli wyznaczają zawiasy {}. 
Jak wyjdziemy z pętli for nie możemy odwołać się do zmiennej, ponieważ wyskakuje błąd error: ‘i’ was not declared in this scope. 
Aby to naprawić deklarujemy zmienną przed pętlą.

==== while ====
int i; //Deklaracja
int i = 0; //DEKLARACJA I INICJACJA

===== TABLICA =====
Każda tablica musi mieć nawiasy kwadratowe. Musimy podać ile zmiennych.
Zmienna 'tablica'(jej nazwa) ona wskazuje tylko pierwszą komórkę. Jak są tablice, to najczęściej będzie pętla.
Adres komórki w pamięci jest referencją.**Tablica** jest od razu **referencją. Tablica jest przekazywana przez referencję.**
Zmienna po **wskaźniku** jest **wskaźnikiem** do jakiejś komórki w którje będą przechowywane floaty.



==== Znakowa ====
Do **char** możemy dodać tylko 1 znak. char - charakter. Na 1 bajcie możemy zapisać 255 wartości, zmienna char może przechowywać 255 znaków, z tego powodu nie można podawać dużo znaków.
Żeby przechowywać ciągi napisów używa się tablic znakowych. **\0** to znak specjalny kończący tablicę znaków. Rozmiar tablicy powinien być o 1 większy, niż liczba znaków którą chcemy wpisać, żeby mieć gdzie zapisać \0.
Napisy w podwójnych cudzysłowach są **s tałymi znakowym**i. Tablicę znaków można zainicjować podając znaki w podwójnym cudzysłowiu **"ciąg znaków" **lub wypisując znaki w nawiasie **{'znak'}**.
Stałe znakowe zapisujemy **dużymi literami np. N i M. **Srand służy do generowania liczb pseudolosowych. Czas uniksowy to epoka czasu, która upłynęła od 1 stycznia 1970. **srand(time(NULL));** - to inicjacja generatora liczb pseudolosowych.
**rand()** to instrukcja, która zwraca wartość od 0 do 1.
cin.getline(TABLICA, ROZMIAR) - to funkcja  ( getline usuwa znak końca linii \n z ciągu znaków) która pomaga w zapisywaniu tablicy znaków, przy użyciu spacji. 
Jeżeli chcemy użyć pętli **while** do drukowania tablicy nie musimy znac jej rozmiaru. Kody **ASCII** dotyczą alfabetu łacińskiego.

==== Anagramy ====
Jeżeli chcemy wyznaczyć liczbę wyrazów o unikalnej kombinacji : Jesli wyraz ma długość **n** znaków to ilość tych wyrazów to **n!.**


== Złoty podział wskazują liczby fibonacciego. ==

 
